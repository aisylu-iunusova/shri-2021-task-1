class t{userMaxLength=5;userMinLength=3;selectUser=null;preparedUsers({users:t,selectedUserId:a},i){const e=[];return t.forEach(((t,s)=>{s<i&&e.push(t),t.id===a&&s>2&&(this.selectUser=t,e.pop(),e.push(t))})),e}getSelectUser(){return this.selectUser}template(t){const{emoji:a,selectedUserId:i}=t,e=this.preparedUsers(t,this.userMaxLength),s=this.selectUser;return`\n      <div class="Leaders-root">\n        <div class="Leaders-charts">\n          ${e.map(((t,e)=>{const{id:n,avatar:r,name:v,valueText:l}=t,d=0===e,c=e+1,o=n===i,m=1===c&&s;return`\n                <div class="Leaders-chart" style="grid-area: rank_${c};z-index: ${this.userMaxLength-e}" data-rank="${c}">\n                  <div class="Leaders-user">\n                    <div class="User-root" id="${n}">\n                      <div class="User-emoji">\n                        ${d?a:o?"üëç":""}\n                      </div>\n                      <img\n                        class="User-avatar"\n                        src="/assets/images/4x/${r}"\n                      />\n                      <div class="User-name">${v}</div>\n                      <div class="User-value">${l}</div>\n                    </div>\n                  </div>\n                  <div\n                    class="Leaders-bar ${d?"Leaders-bar--active":""}"\n                  >\n                    ${c}\n                    \n                    ${m?`\n                          <div class="Leaders-user">\n                            <div class="User-root" id="${m.id}">\n                              <div class="User-emoji">\n                                üëç\n                              </div>\n                              <img\n                                class="User-avatar"\n                                src="/assets/images/4x/${m.avatar}"\n                              />\n                              <div class="User-name">${m.name}</div>\n                              <div class="User-value">${m.valueText}</div>\n                            </div>\n                            <div class="Leaders-userLine">5</div>\n                          </div>\n                        `:""}\n                  </div>\n                </div>\n              `})).join("")}\n        </div>\n      </div>\n    `}}class a{maxValue=0;getMaxValue(t){return this.maxValue||(this.maxValue=Math.max(...t.map((t=>t.value)))),this.maxValue}template(t){const{values:a,users:i}=t,e=this.getMaxValue(a);return`\n      <div class="Chart-root">\n        <div class="Chart-barsWrap">\n          <div class="Chart-bars">\n            ${a.map((({value:t,title:a,active:i})=>`\n                  <div class="Chart-bar">\n                    <div class="Chart-barValue ${i?"Chart-barValue--active":""}">${t||""}</div>\n                    <div\n                      class="Chart-barColumn ${i?"Chart-barColumn--active":""}"\n                      style="height: calc(${t} / ${e} * (70% - 30px));"\n                    ></div>\n                    <div class="Chart-barTitle">${a}</div>\n                  </div>\n                `)).join("")}\n          </div>\n        </div>\n        <div class="Chart-leaders">\n          ${i.slice(0,2).map((({valueText:t,name:a,avatar:i,id:e})=>`\n                <div class="Chart-leader">\n                  <div class="User-root User-gorizontal" id="${e}">\n                    <img\n                      class="User-avatar"\n                      src="/assets/images/4x/${i}"\n                    />\n                    <div class="User-content">\n                      <div class="User-name">${a}</div>\n                      <div class="User-value">${t}</div>\n                    </div>\n                  </div>\n                </div>\n              `)).join("")}\n        </div>\n      </div>\n    `}}class i{template(t){const{categories:a}=t;return`\n      <div class="Diagram-root">\n        <div class="Diagram-chart">\n          <div class="Diagram-svg"></div>\n          <div class="Diagram-total">\n            <div class="Diagram-totalText">182 –∫–æ–º–º–∏—Ç–∞</div>\n            <div class="Diagram-totalDiff">+42 —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞</div>\n          </div>\n        </div>\n        <table class="Diagram-categories">\n          ${a.map((({differenceText:t,title:a,valueText:i})=>`\n                <tr class="Diagram-category">\n                  <td class="Diagram-categoryItem">\n                    <span class="Diagram-categoryCircle"></span>\n                  </td>\n                  <td class="Diagram-categoryItem Diagram-categoryTitle">${a}</td>\n                  <td class="Diagram-categoryItem Diagram-categoryDiff">${t.replace(/ –∫–æ–º–º–∏—Ç–æ–≤/i,"").replace(/ –∫–æ–º–º–∏—Ça/i,"")}</td>\n                  <td class="Diagram-categoryItem Diagram-categoryValue">${i.replace(/ –∫–æ–º–º–∏—Ç–æ–≤/i,"").replace(/ –∫–æ–º–º–∏—Ç–∞/i,"")}</td>\n                </tr>\n              `)).join("")}\n        </table>\n      </div>\n    `}}class e{template({title:t="",subtitle:a="",children:i="",className:e="default"}){return`\n      <div class="Layout-root Layout-${e}">\n        <div class="Layout-header">\n          <div class="Header-root">\n            <h1 class="Headline-root">${t}</h1>\n            <p class="Body-root Body-grey">${a}</p>\n          </div>\n        </div>\n        <div class="Layout-main">${i}</div>\n      </div>\n    `}}function s(t){return 1&t}function n(){return window.innerWidth>=567?"desktop":"mobile"}class r{week=["mon","tue","wed","thu","fri","sat","sun"];getSrc(t){return t>=1&&t<=2?"mid":t>=3&&t<=4?"max":t>=5&&t<=6?"extra":"min"}getCommits(t){const a=[];for(const i of this.week){let e=[];if("mobile"!==n())for(let a=0;a<t[i].length;a+=2)e.push(t[i][a]+t[i][a+1]);else e=t[i];a.push(e)}return a}renderMobileChart(t,a){return t.map(((t,i)=>`\n        <div \n          class="Activity-houre" \n          style="\n            z-index: ${i};\n            grid-area: ${this.week[a]};\n            grid-column: ${s(i)?2*a+2:2*a+1} / span 2;\n            grid-row: ${i+1} / span 3;\n          ">\n          <span class="Activity-chart Activity-chart--${this.getSrc(t)}"></span>\n        </div>\n      `)).join("")}renderDesktopChart(t,a){return t.map(((t,i)=>`\n        <div \n          class="Activity-houre" \n          style="\n            z-index: ${a};\n            grid-area: ${this.week[a]};\n            grid-column: ${s(a)?2*i+2:2*i+1} / span 2;\n            grid-row: ${a+1} / span 2;\n          ">\n          <span class="Activity-chart Activity-chart--${this.getSrc(t)}"></span>\n        </div>\n      `)).join("")}template({data:t}){const a="desktop"===n();return`\n      <div class="Activity-root">\n        <div class="Activity-charts">\n          ${this.getCommits(t).map(((t,i)=>a?this.renderDesktopChart(t,i):this.renderMobileChart(t,i))).join("")}\n        </div>\n        <div class="Activity-intervals">\n          <div class="Activity-interval Activity-interval-1">\n            <div class="Activity-intervalImg Activity-intervalImg-1"></div>\n            <div class="Activity-intervalText Activity-intervalText-1"></div>\n          </div>\n          <div class="Activity-interval Activity-interval-0">\n            <div class="Activity-intervalImg Activity-intervalImg-0"></div>\n            <div class="Activity-intervalText Activity-intervalText-0"></div>\n          </div>\n          <div class="Activity-interval Activity-interval-1-2">\n            <div class="Activity-intervalImg Activity-intervalImg-1-2"></div>\n            <div class="Activity-intervalText Activity-intervalText-1-2"></div>\n          </div>\n          <div class="Activity-interval Activity-interval-3-4">\n            <div class="Activity-intervalImg Activity-intervalImg-3-4"></div>\n            <div class="Activity-intervalText Activity-intervalText-3-4"></div>\n          </div>\n          <div class="Activity-interval Activity-interval-5-6">\n            <div class="Activity-intervalImg Activity-intervalImg-5-6"></div>\n            <div class="Activity-intervalText Activity-intervalText-5-6"></div>\n          </div>\n        </div>\n      </div>\n    `}}class v{template({users:t,selectedUserId:a}){return`\n      <div class="Vote-root">\n        <div class="Vote-areas">\n            ${t.map((({id:t,avatar:i,name:e},s)=>{const n=a===t;return`\n                    <div class="Vote-area" style="grid-area: area${s+1};" data-active="${n?"true":"false"}">\n                        <div class="User-root" id="${t}">\n                            <div class="User-emoji">\n                                ${n?"üëç":""}\n                            </div>\n                            <img\n                                class="User-avatar"\n                                src="/assets/images/4x/${i}"\n                            />\n                            <div class="User-name">${e}</div>\n                        </div>\n                    </div>\n                `})).join("")}\n\n            <div class="Vote-area" data-nav="up" style="grid-area: nav-button-up;">\n                <button class="Vote-navButton Vote-navButton--prev" disabled></button>\n            </div>\n            <div class="Vote-area" data-nav="down" style="grid-area: nav-button-down;">\n                <button class="Vote-navButton Vote-navButton--next"></button>  \n            </div>\n        </div>\n      </div>\n    `}}class l{constructor(){this.layout=new e,this.leaders=new t,this.vote=new v,this.chart=new a,this.diagram=new i,this.activity=new r}static renderTemplate(t,a){return(new l).render(t,a)}render(t,a){return this[t]?this.layout.template({title:a.title,subtitle:a.subtitle,className:t,children:this[t].template(a)}):null}}window.renderTemplate=l.renderTemplate;
